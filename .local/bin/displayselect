#!/bin/sh

launcher="$LAUNCHER"

# A UI for detecting and selecting all displays. Probes for connected
# displays and lets user select one to use.

twoscreen() { # If multi-monitor is selected and there are two screens.
    mirror=$(printf "no\\nyes" | $launcher -i -p "Mirror displays?")
    # Mirror displays using native resolution of external display and a scaled
    # version for the internal display
    if [ "$mirror" = "yes" ]; then
        external=$(echo "$screens" | $launcher -i -p "Optimize resolution for:")
        internal=$(echo "$screens" | grep -v "$external")

        hyprctl keyword monitor "$external,preferred,auto,1"
        hyprctl keyword monitor "$internal,preferred,auto,1,mirror,$external"
    else
        primary=$(echo "$screens" | $launcher -i -p "Select primary display:")
        secondary=$(echo "$screens" | grep -v "$primary")
        direction=$(printf "left\\nright" | $launcher -i -p "What side of $primary should $secondary be on?")
        hyprctl keyword monitor "$primary,preferred,auto,1"
        hyprctl keyword monitor "$secondary,preferred,auto-$direction,1"
    fi
   }

morescreen() { # If multi-monitor is selected and there are more than two screens.
 	primary=$(echo "$screens" | $launcher -i -p "Select primary display:")
 	secondary=$(echo "$screens" | grep -v "$primary" | $launcher -i -p "Select secondary display:")
 	direction=$(printf "left\\nright" | $launcher -i -p "What side of $primary should $secondary be on?")
 	tertiary=$(echo "$screens" | grep -v "$primary" | grep -v "$secondary" | $launcher -i -p "Select third display:")
 	# echo 'wlr-randr --output "$primary" --preferred --output "$secondary" --"$direction"-of "$primary"
  # --preferred --output "$tertiary" --"$(printf "left\\nright" | grep -v "$direction")"-of "$primary" --preferred'
  hyprctl keyword monitor "$primary,preferred,auto,1"
  hyprctl keyword monitor "$secondary,preferred,auto-$direction,1"
  hyprctl keyword monitor "$tertiary,preferred,auto-$(printf "left\\nright" | grep -v "$direction"),1"
}

multimon() { # Multi-monitor handler.
 	case "$(echo "$screens" | wc -l)" in
 		2) twoscreen ;;
 		*) morescreen ;;
 	esac ;}

onescreen() { # If only one output available or chosen.
  disableOthers=$(echo "$allposs" | grep -v "\b$1" | cut -d ' ' -f2 | awk '{print $0, ",disable"}' | paste -sd ' ' -)
  hyprctl keyword monitor "$1,preferred,auto,1"
  hyprctl keyword monitor "$disableOthers"
}

postrun() { # Stuff to run to clean up.
	setbg		# Fix background if screen size/arangement has changed.
}

# Get all possible displays
allposs=$(hyprctl monitors all | grep "Monitor")

# Get all connected screens.
screens=$(echo "$allposs" | awk '{print $2}')

# If there's only one screen
[ "$(echo "$screens" | wc -l)" -lt 2 ] &&
	{ onescreen "$screens"; postrun; notify-send "Only one screen detected." "Using it in its optimal settings...";  exit ;}

# # Get user choice including multi-monitor:
chosen=$(printf "%s\\nmulti-monitor" "$screens" | $launcher -i -p "Select display arangement:") &&
case "$chosen" in
	"multi-monitor") multimon ;;
 	*) onescreen "$chosen" ;;
esac

postrun
